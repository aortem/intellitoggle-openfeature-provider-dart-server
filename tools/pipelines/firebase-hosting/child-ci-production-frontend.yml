stages:
  - validate
  - preview
  - deploy

# Debug Stage
debug_merge_request:
  stage: validate
  script:
    - echo "Basic Merge Request Variables..." 
    - echo "CI_MERGE_REQUEST_IID is '$CI_MERGE_REQUEST_IID'"
    - echo "CI_MERGE_REQUEST_SOURCE_BRANCH_NAME is $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME is $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - echo "CI_MERGE_REQUEST_EVENT_TYPE is $CI_MERGE_REQUEST_EVENT_TYPE"
    
    - echo "Commit Information Variables..."
    - echo "CI_COMMIT_REF_NAME is $CI_COMMIT_REF_NAME"
    - echo "CI_COMMIT_BRANCH is $CI_COMMIT_BRANCH"
    - echo "CI_COMMIT_MESSAGE is $CI_COMMIT_MESSAGE" 

    - echo "Determining branch name..."
    - BRANCH_NAME=${CI_COMMIT_BRANCH:-${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:-$CI_COMMIT_REF_NAME}}
    - echo "Branch name determined $BRANCH_NAME"

    - echo "Pipeline Metadata..."
    - echo "CI_PIPELINE_SOURCE is $CI_PIPELINE_SOURCE"
  rules:
    - if: '$CI_PIPELINE_SOURCE'  # Forces execution in ALL scenarios
      when: always

validate_branch_name:
  stage: validate
  script:
    - echo "Validating branch name..."
    - |
      BRANCH_NAME=${CI_COMMIT_BRANCH:-$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
      echo "Branch name: $BRANCH_NAME"

      if echo "$BRANCH_NAME" | grep -Eq "^(development|qa|beta|main)$"; then
        echo "✅ Valid branch name for protected branches: $BRANCH_NAME."
      elif echo "$BRANCH_NAME" | grep -Eq "^(feat|fix|hotfix|chore|test|refactor|release)/[a-z0-9_-]+$"; then
        echo "✅ Branch name follows naming convention: $BRANCH_NAME."
      else
        echo "❌ Invalid branch name: $BRANCH_NAME."
        echo "Expected format: <type>/<branch-name>. Valid types: feat, fix, hotfix, chore, test, refactor, release, development, qa, beta, main."
        exit 1
      fi
  rules:
   - when: always

validate_commit_messages:
  stage: validate
  image: alpine:latest
  script:
    - apk add --no-cache git bash grep
    - echo "Validating commit messages..."
    - |
      # Define valid target branches for merge commits
      TARGET_BRANCHES="(development|main|qa)"
      # Check if this is a merge request pipeline
      if [ -n "$CI_MERGE_REQUEST_IID" ]; then
        echo "Merge request detected. Allowing merge commit messages..."
        MERGE_REGEX="^Merge branch '[a-zA-Z0-9/_-]+' into '$TARGET_BRANCHES'$"
        REGEX="^(feat|fix|hotfix|chore|test|refactor|release)(\([a-z0-9_-]+\))?: .{1,72}$"
        COMBINED_REGEX="($MERGE_REGEX|$REGEX)"
      else
        echo "Standard pipeline detected. Enforcing strict commit message validation..."
        REGEX="^(feat|fix|hotfix|chore|test|refactor|release)(\([a-z0-9_-]+\))?: .{1,72}$"
      fi

      # Validate the last commit message
      INVALID_COMMITS=$(git log -1 --format=%s | grep -vE "$COMBINED_REGEX" || true)

      if [ -n "$INVALID_COMMITS" ]; then
        echo "❌ Commit message does not follow convention:"
        echo "$INVALID_COMMITS"
        echo "Expected formats:"
        echo "  Merge branch 'source-branch' into 'target-branch' (for merge requests)"
        echo "  <type>(<scope>): <short summary> (standard commits)"
        echo "Examples:"
        echo "  feat(auth): add OAuth 2.0 support"
        echo "  fix(payment): resolve rounding error in total calculation"
        exit 1
      else
        echo "✅ Commit message follows the convention."
      fi
  rules:
    - when: always

# firebase:preview:
#   image: google/cloud-sdk:alpine
#   stage: preview
#   before_script:
#     - apk add --no-cache nodejs npm 
#     - bash tools/scripts/firebase/gcloud_prod_acc_firebase_production.sh
#   script:
#     - ls -la
#     - cd intellitoggle/frontend
#     - firebase hosting:channel:deploy $CI_COMMIT_REF_NAME --debug
#   rules:
#     # Condition 1: Branch is not main, qa, or development
#     - if: '$CI_COMMIT_BRANCH != "main"'
#       when: always

# firebase:deploy:
#   image: google/cloud-sdk:alpine
#   stage: deploy
#   before_script:
#     - apk add --no-cache nodejs npm 
#     - bash tools/scripts/firebase/gcloud_prod_acc_firebase_production.sh
#   script:
#     - ls -la
#     - cd intellitoggle/frontend
#     - firebase deploy --project intellitoggle-prod
#   rules:
#     # Condition 1: Branch is not main, qa, or development
#     - if: '$CI_COMMIT_BRANCH == "main"'
#       when: always